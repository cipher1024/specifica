// single key model

protocol lu {

  roles Client, Server

  constant init_Server

  interaction core {
    msg Client -> Set<Server> wr    (BOOLEAN val)
    msg Server ->     Client  wrack ()
    msg Client -> Set<Server> rd    ()
    msg Server ->     Client  rdres (BOOLEAN val)

    role Client {
      state view Set<Server> = init_Server
      state BOOLEAN done

      handle event rdwr(BOOLEAN v) {
        view(Server) !! wr(val=v)
        await msg wrack from all(Server)
        view(Server) !! rd()
        await msg rdres from all(Server)
        change done = TRUE
      }

      when done handle event endstate {
        assert(FALSE, "!")
      }
    }

    role Server {
      state BOOLEAN svalue

      handle msg rd { 
        reply rdres(val=svalue)
      }

      handle msg wr {
        reply wrack()
        change svalue = wr.val
      }
    }

    // pick an element of the set non deterministically
    tla { some(set) == CHOOSE s \in set: TRUE } 
  }
}

protocol prim_stateinit {
  constant NIL, A
  interaction i {
    tla { Card == 0..1 }
    tla { Nat == 0..1 }
    tla { TypeDefaultValue(x) == ("Card" :> 0)[x] } 
    role Client {
      state Card card
      state Nat nat
      state Nil<BOOLEAN> a
(*    state Maybe<BOOLEAN, 0> a1 *)
(*    state Maybe<BOOLEAN, NIL> a2 *)
      state Set<BOOLEAN> b
      state Seq<BOOLEAN> c
      state Pair<BOOLEAN, BOOLEAN> d
      state Map<BOOLEAN, BOOLEAN> e
      state Enum( A | B | C ) f

 (* NOT supported yet
      state Rec<BOOLEAN foo, Int bar> g -- simple record type

      state Range<0,N> h
      state ID<Modulo> i -- Int repeats itself mod Modulo
      state Nonce j      -- Int guaranteed to be unique, config max
      state Handle k     -- Int, can be closed (put back to pool)
*)

      handle once go {
	change a = TRUE (* something, so I can see the Next action *)
      }
    }
  }
}
PROTOCOL paxos CONCERN basic {

  CONSTANT LeadershipAttemptInterval
  CONSTANT BootstrapVoterSet // SET<Voter>
  CONSTANT BootstrapProposerSet // SET<Voter>
  CONSTANT ClientRequestTimeout // INT
  CONSTANT VoteTimeout // INT

  ROLES Proposer, Voter

  TLA { any(s) == CHOOSE x \in s: TRUE }

  INTERACTION AttemptLeadership( Proposer, SET<Voter> ) {
    MSG Proposer -> SET<Voter> ProposershipReq( INT proposalID )
    MSG Voter    -> Proposer   ProposershipRes( INT proposalID )

    ROLE Proposer() {
      VIEWSTATE Voter = BootstrapVoterSet
      STATE BOOLEAN leader = FALSE
      STATE INT nextProposalID = 1 (* 0 has special meaning of no-proposal *)
      WHEN ~leader EVERY LeadershipAttemptInterval {
        voters !! ProposershipReq( proposal = 0 )
      }
      WHEN ~leader HANDLE MSG leadershipRes FROM MAJORITY(Voter) {
        (\A m \in leadershipRes: m.proposal == 0) ->
           ...
      }
    }

    ROLE Voter() {
      STATE ...
    }
  }

  INTERACTION ClientRequestRouting() {
    MSG Client   -> SET<Proposer> clientReq(INT clientReqID, BOOLEAN payload)
    MSG Proposer -> Client        clientRes(INT clientReqID, BOOLEAN payload)

    ROLE Client() {
      VIEWSTATE Proposer = BootstrapProposerSet
      STATE SEQ<INT,BOOLEAN> results // TODO: assert that there are no gaps!
      STATE INT nextReqID = 0
      STATE BOOLEAN retry = FALSE
      STATE BOOLEAN retryPayload = FALSE
      TIMER requestTimeout

      HANDLE EVENT req(BOOLEAN b) {
        VIEW(Proposer) !! clientReq( clientReqID = nextReqID, payload = b )
        CHANGE nextReqID = @+1, 
	       retry = TRUE, 
	       retryPayload = b
        STARTTIMER requestTimeout ClientRequestTimeout
      }
      HANDLE MSG clientRes {
        CHANGE results = Append( @, <<nextReqID-1, clientRes.payload>> ), 
	       retry = FALSE
        CANCEL requestTimeout
      }
      WHEN retry HANDLE TIMEOUT requestTimeout {
        (* retry with same request id in case         *)
        (* e.g. leader crashed before result was sent *)
        VIEW(Proposer) !! clientReq( clientReqID = nextReqID, 
                                     payload = retryPayload )
        STARTTIMER requestTimeout ClientRequestTimeout
      }    
    }
  }

  INTERACTION RequestVoting() {
    MSG Proposer -> SET<Voter>    vote(INT index, BOOLEAN payload )
    MSG Voter    -> Proposer      voteRes(INT index, NIL<BOOLEAN> payload)

    ROLE Proposer() {
      STATE INT cmdIndex = 0
      STATE Client curClient = NIL
      TIMER voteTimeout

      WHEN leader HANDLE MSG clientReq {
        CHANGE curClient = clientReq.sender
        VIEW(Proposer) !! vote( cmdIndex, clientReq.payload )
        STARTTIMER voteTimeout VoteTimeout
      }
      WHEN leader HANDLE MSG voteRes FROM MAJORITY(Voter) {
        (* TODO assert all values are the same and non-NIL *)
        curClient ! any(voteRes).payload
      }
      WHEN leader HANDLE TIMEOUT VoteTimeout {
        CHANGE leader = FALSE (* abdicate *)
      }
    }

    ROLE Voter() {
     
    }
  }
}

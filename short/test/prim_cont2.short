(* demonstrates that we can handle AWAIT inside a handler that *)
(* has more than one guard arm                                 *)
protocol prim_cont2 {
  interaction i {
    msg Client -> Set<Server> request()  (* multicast*)
    msg Server ->     Client  response()
    
    tla { Int == {10,11,12,20,21,22} }

    role Client {
      state Map<Boolean, Boolean> x

      (* two guards, each with await inside *)
      handle any msg m {
        | m.foo -> 
           state Int ok = 10
           view(Server) !! request()
           await msg response from EXPR(Server, all(Server))
           change ok = 11
           await msg response from EXPR(Server, all(Server))
           change ok = 12
           await msg response from EXPR(Server, all(Server))
           change ok = 13
           await msg response from EXPR(Server, all(Server))
           change ok = 14
	| m.bar ->
	   change ok = 20
           await msg response from EXPR(Server, all(Server))
           change ok = 21
           await msg response from EXPR(Server, all(Server))
           change ok = 22
	| m.chug ->
	   change ok = 30
           await msg response from EXPR(Server, all(Server))
           change ok = 31
      }

      (* one guard, with await *)
      handle any msg n {
        | n.foo -> 
           state Boolean ok
           view(Server) !! request()
           await msg response from EXPR(Server, all(Server))
           change ok = true
      }

      (* no guard at all *)
      handle any msg o {
           state Boolean ok
           view(Server) !! request()
           await msg response from EXPR(Server, all(Server))
           change ok = true
      }

      handle crash Server s {
        changeview Server = @ \ s
	(* note, we're not rewinding "go" here *)
      }

      handle event whatever {
        rewind m (* refers to "handle any m *)
      }

    }

    role Server {
      handle msg request {
        reply response()
      }
    }
  }
}

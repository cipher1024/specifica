protocol Replication concern join {

constant InitSponsor

roles Client, Replica

INTERACTION novice_sync_and_promotion_to_replica {
  MSG Replica -> Replica join_request()
  MSG Replica -> Replica join_response( SET<Replica> view )
  MSG Replica -> Replica fetch_key_request()
  MSG Replica -> Replica fetch_key_response(Key k, 
				 	    BOOLEAN locked, 
					    BOOLEAN data,
					    BOOLEAN more)

  (* this should really be a Novice role, but we cannot morph roles yet *)
  ROLE Replica {
    STATE VIEW SET<Replica> = {}
    STATE NIL<Replica> sponsor = InitSponsor // bootstrap

    extend @hook_do_start_Replica(self) { // run upon start of a new replica
      (* sponsor ! join_request *)
      assert(FALSE, "!")
    }
}}}





    HANDLE MSG join_response {
      |  join_response.more ->
           CHANGE data[join_response.k] = join_response.data
           CHANGE locked[join_response.k] = join_response.locked
           sponsor ! fetch_key_request
      | ~(join_response.more) ->
           CHANGE data[join_response.k] = join_response.data
           CHANGE locked[join_response.k] = join_response.locked
           CHANGEVIEW Replica = join_response.view
	   (* FIXME 'BECOME Replica TRANSFER STATE data, locked, view' *)
    }
  }

  ROLE Replica(SET<Replica> InitUpReplica ) {
    USE STATE data   OF basic_rd_wr_with_implicit_locking
    USE STATE locked OF basic_rd_wr_with_implicit_locking

    STATE VIEWS SET<Replica> = InitUpReplica
    // A replica can be sponsor to multiple novices at the same time.
    STATE MAP< Replica, MAP<Key, BOOLEAN> > snapshot_data
    STATE MAP< Replica, MAP<Key, BOOLEAN> > snapshot_locked
    STATE MAP< Replica, SET<Key> > pending_keys

    HANDLE MSG join_request {
      REPLY join_response(view = VIEW(Replica))
      CHANGE snapshot_data = value, snapshot_locked = locked
      CHANGE pending_keys = Key (* all keys yet to be copied. *)
    }

    HANDLE MSG fetch_key_request {
      LET n = fetch_key_request.sender
        , k = CHOOSE k \in pending_keys: TRUE
      REPLY fetch_key_response( k = k, 
				locked = snapshot_locked[n,k], 
				data   = snapshot_data[n,k],
				more   = pending_keys[n] \ {k} /= {})
      CHANGE pending_keys[n] = @ \ {k}
    }
  }
}

}
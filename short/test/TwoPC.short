protocol TwoPc {  
  constant NIL

  interaction Basic {
    tla { Value == BOOLEAN }    
    tla { numtxid == 2 }
    tla { Txid == 0 .. (numtxid - 1) }
    tla { inctx(i) == i + 1 }

    msg Coordinator -> Set<Participant> prepare     (Txid id, Value value)
    msg Participant ->     Coordinator  prepareRes  (Txid id, BOOLEAN ok)
    msg Coordinator -> Set<Participant> commit      (Txid id)
    msg Participant ->     Coordinator  ackCommit   (Txid id)
    msg Coordinator -> Set<Participant> rollback    (Txid id)
    msg Participant ->     Coordinator  ackRollback (Txid id)

    role Coordinator {
      state view Set<Participant> = Participant
      state Txid cur_txid = 0

      handle event tx_start(BOOLEAN v) {
        whilein {
          view(Participant) !! prepare(id = cur_txid, value = v)
          await msg prepareRes  
	        from all(Participant) 
                where all prepareRes.ok
        } do {
          handle msg prepareRes 
                 from all(Participant) 
                 where some ~prepareRes.ok {
            view(Participant) !! rollback(id = cur_txid)
	    await msg ackRollback
	          from all(Participant)
  	          where all ackRollback.id = cur_txid
            change cur_txid = inctx(cur_txid)
            rewind tx_start
          }
        }
        view(Participant) !! commit(id = cur_txid)
        await msg ackCommit 
	      from all(Participant) 
              where all ackCommit.id = cur_txid

        change cur_txid = inctx(cur_txid)
      }      
    }

    role Participant {
      state Map< Txid, Nil<Value> > prepared_value
      state Map< Txid, Nil<Value> > committed_value

      (* non-deterministic handling of prepare, can fail or not *)
      handle msg prepare {
        change prepared_value[prepare.id] = prepare.value
        reply prepareRes(id = prepare.id, ok = TRUE)
      }

      (* non-deterministic handling of prepare, can fail or not *)
      handle msg prepare {
        reply prepareRes(id = prepare.id, ok = FALSE)
      }

      handle msg rollback {
        change prepared_value[rollback.id] = NIL
	reply ackRollback(id = rollback.id)
      }

      handle msg commit {
        assert(prepared_value[commit.id] # NIL, 
	       "commit, but no value prepared")
        change committed_value[commit.id] = prepared_value[commit.id]
	reply ackCommit(id = commit.id)
      }
    }
  }

  interaction PipeCleaning {
    role Coordinator {
      handle any msg m {
        | m.id < cur_txid -> (* message about old transaction *)
	    drop m
	    break
        | otherwise ->
	    continue
      }

    }
  }
}

(* The point of this test is to show that if there's two message of the same *)
(* type (a), the 2nd in the queue (enab=TRUE) will in fact be received by    *)
(* guarded handler and the first one will be "skipped"                       *)
(* An earlier naive message selection scheme had blocked since it picked the *)
(* first message, but then failed to run the action since the guard was false*)
(* (and there wasn't any backtracking to try another (2nd) "a" message.      *)
protocol prim_singlemsg_rcv {
  roles Sender, Receiver
  interaction foo {
    msg Sender -> Receiver a(BOOLEAN enab)

    role Sender {
      handle once go {
        let r = CHOOSE r \in Receiver: TRUE
        r ! a(enab = FALSE)
        r ! a(enab = TRUE)
      }
    }

    role Receiver {
      state BOOLEAN s = TRUE (* mix in state to ensure receiver is passed *)
      state BOOLEAN ok = FALSE

      (* we're not handling the a.enab = FALSE message, so it's "clogging" *)
      (* the Receiver's input                                              *)
      using selective_receive
      handle msg a {
        | s /\ a.enab -> change ok = TRUE
        | otherwise -> assert(FALSE, "Error,this should not trigger", self, a)
      }

      (* moved the assertion into its own handler to see the removal of the *)
      (* "a" message from the inbox (in the counterexample)                 *)
      when ok handle event ok {
        assert(FALSE, "Good, did receive!", self)
      }
    }
  }

  (* bugfix to generate obuf and copy actions *)
  (* obuf is needed in any case and so is the copy action *)
  interaction x {
    msg Sender -> SET<Receiver> foo()

    role Sender {
      when FALSE handle event dummy {
        Receiver !! foo
      }
    }
  }
}

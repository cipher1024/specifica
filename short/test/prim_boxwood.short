PROTOCOL prim_boxwood CONCERN core {

CONSTANT InitObserver, NIL, GracePeriod, BeaconPeriod, MaxTime

ROLES Machine, Observer, Zzz // helps detect typos in recurring role defs

INTERACTION dummy() {
  TLA { Perms == Permutations(Machine) \cup Permutations(Observer) }
}

INTERACTION keep_alive( Machine, SET<Observer> ) {

  MSG Machine -> SET<Observer> beacon()
  MSG Observer -> Machine ack()

  ROLE Machine() {
    REQUIRES GracePeriod > BeaconPeriod
    STATE VIEWS SET<Observer> = InitObserver // init bootstrap values

    STATE TIMER gracePeriodTimer

    EVERY BeaconPeriod {
      VIEW(Observer) !! beacon
    }

    HANDLES MSG ack FROM MAJORITY(Observer) {
      (* At this point there's a gracePeridodTimer running, TIMERRESTART *)
      (* will implictly cancel the existing schedule entry.              *)
      TIMERRESTART gracePeriodTimer DURATION GracePeriod
    }

    (* This happens only when the Machine cannot reach a majority of     *)
    (* Observers. *)
    HANDLES TIMEOUT gracePeriodTimer {
      SHUTDOWN
    }
  }

  ROLE Observer() {
    STATE MAP<Machine,Time> last_beacon = [m \in Machine |-> 0]
    HANDLES MSG beacon {
      REPLY ack()
      CHANGE last_beacon[beacon.sender] = NOW
    }
  }
}

(*
INTERACTION foo() {
  ROLE Zzz() { 
    STATE BOOLEAN b = FALSE
    (* induce Observers to crash *)
    HANDLE CRASH Observer o { 
      CHANGE b = TRUE
    } 

    HANDLE CRASH Zzz o { 
      CHANGE b = TRUE
    } 
  }
}
*)

} (* of PROTOCOL *)
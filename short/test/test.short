protocol test {
  constant Key, TheKey, TheStore

  roles C, Store (* one Store, many Clients, i.e. web servers *)

  tla { Value == GUID }

  // claim is that all Cs see the same queue name
  tla { P == \A c1,c2 \in C: c_state[c1].the_qn = c_state[c2].the_qn }

  interaction i {
    msg C -> Store wr(Key k, Value v)
    msg Store -> C wrack(Key k)
    msg C -> Store rd(Key k)
    msg Store -> C rdack(Key k, NIL<Value> v)

    role C {
      (* claim is all Cs will have same the_qn *)
      state NIL<ID> the_qn

      state BOOLEAN pending = FALSE (* hack, due to lack of case statement *)
      when ~pending handle event create_queue {
        TheStore ! rd(TheKey)
      }
      when pending handle msg rdack {
        | rdack.v = NIL -> (* thinks queue hasn't been created *)
            state GUID qn (* pick globally unique value *)
            TheStore ! wr(TheKey, qn)
            await wrack
            change the_qn = qn
	    change pending = FALSE
        | otherwise ->
            change the_qn = rdack.v
	    change pending = FALSE
      }
    }

    (*   0     1     2     3     4
         +-----+-----+-----+-----+
         w=A
         r=N  r=N|A r=A   r=A   r=A
              
              w=B
         r=N  r=N|A r=A|B r=B   r=B

                    w=C
         r=N  r=N|A r=A|B r=B|C r=C 

    *)
    role Store {
      persistent state Map< Key, NIL<Value> > v
      persistent state Map< Key, Time > t
      (* history variables, need 2 most recent values, assuming eventual *)
      (* consistency converges in 2 timesteps                            *)
      persistent state Map< Key, NIL<Value> > pv
      persistent state Map< Key, NIL<Value> > ppv

      handle msg wr {
        (* last write wins *)
        let k = wr.k
        change ppv[k]=pv[k], pv[k]=v[k] (* shift history *)
        change v[k]=wr.v, t[k]=now
        reply wrack(k)
      }

      handle msg rd {
        | now - t[rd.k] = 0 ->
	    let k=rd.k,  
                v=arb({ppv[k], pv[k]}) (* \E v \in {a,b}, _not_ let! *)
	    reply rdack(k, v))
        | now - t[rd.k] = 1 -> (* value may or may not have settled *)
	    let k=rd.k,  
                v=arb({pv[k], v[k]})
	    reply rdack(k, v))
        | now - t[rd.k] > 1 -> (* value settled *)
	    reply rdack(rd.k, v[rd.k]))
      }
    }
  }
}

protocol Replication concern client_crash {

constant Key
constant NIL // fixme should be in auto gen part of config

roles Client, Replica

interaction client_crash_unlock {
  display swimlane {
    msg crashClientReplica color = red
  }

  tla { Keys(f) == DOMAIN(f) }

  role Replica {
    // If a Client crashes, the Replicas unlock all keys owned by that Client.
    // hence the Replica need to keep track of which Client owns which key.
    persistent state Map< Key, NIL<Client> > owner // owner NIL by default

    handles crash Client c {
      let c_owned_keys = {k \in Keys(owner) : owner[k] = c}
      change owner = [k \in Key |-> IF k \in c_owned_keys
		                    THEN NIL 
		                    ELSE owner[k]]
      change locked = [k \in Key |-> IF k \in c_owned_keys
		                     THEN FALSE
		                     ELSE locked[k]]
    }
    extend @lock(k, o) { change owner[k] = o }
    extend @unlock(k)  { change owner[k] = NIL }
  }
}

interaction client_crash_stale {
  role Replica {
    // If a Client crashes, set the stale bit for all keys owned by
    // the crashing client.
    persistent state Map< Key, BOOLEAN > stale

    handles crash Client c {
      let c_owned_keys = {k \in Keys(owner) : owner[k] = c}
      change stale = [k \in Key |-> IF k \in c_owned_keys
		                    THEN TRUE (* mark locked key as stale *)
		                    ELSE stale[k]]
    }

    use msg rdack of rdwr
    tag msg rdack to Client {
      (* FIXME kramer@acm.org reto -- rd.k is workaround. Should write       *)
      (* triggermsg.k, but TAG rewrite does not properly rewrite rdack to rd *)
      (* upon the merge                                                      *)
      BOOLEAN stale = stale[rd.k]
    }

    (* only wr, not release, hence I cannot use @unlock *)
    extend @wr(wr) { change stale[wr.k] = FALSE } 
  }

  (* change how the client determines the read value to take staleness into *)
  (* account.                                                               *)
  override basic_rd_wr tla { 
    rdval(rdack) == IF \E m \in rdack: m.stale
                    THEN LET nonstale == {m \in rdack: ~m.stale}
                          IN IF nonstale = {}
                             THEN any2(rdack, "data")
                             ELSE any2(nonstale, "data")
                    ELSE any2(rdack,"data") 
  }

  (* show stale rdack responses as dashed *)
  display swimlane {
    msg rdack style = IF stale THEN dashed ELSE solid
  }
}

interaction check_this_client_crash {
  (* Add handling of stale bit, and 'running'. Note RS is no longer used. *)
  override check_this tla { 
    Consistency == 
	  LET srvs == { r \in Replica: st_Replica[r].g_running }
           IN \A k \in Key:
	         IF \A r \in srvs: ~st_Replica[r].locked[k] (* none locked *)
                 THEN \A r,s \in srvs: (* none stale *)
		         (~st_Replica[r].stale[k] /\ ~st_Replica[s].stale[k])
                            => st_Replica[r].value[k] = st_Replica[s].value[k]
                 ELSE TRUE
  }
}

}

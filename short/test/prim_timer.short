PROTOCOL prim_timer {
  CONSTANT Int, MaxTime
  INTERACTION foo() {
    MSG R -> R foo()
    TLA { Time == 1..MaxTime }

    TLA { TimerRemoveAndSchedule(sched, rementry, addset) == 
            LET sched1 == sched \ { rementry}
	        sched2 == sched1 \cup addset
	        times == { x[1] : x \in sched2 }
	        t == CHOOSE t \in times: \A tt \in times: t <= tt (* min *)
             IN << t, sched2 >>
        }
    TLA { TimerNext(sched, time) == 
            LET pair == CHOOSE pair \in sched: pair[1] = time
             IN pair[2] (* timer id *)
        }
    TLA { AllTimerNames == {"t5", "tZ" } }

    ROLE R() {
      STATE Int x = 0

      STATE SET< MAP<Time, AllTimerNames> > sched = { <<0, "t5">> }
      STATE Time time = 0

      STATE BOOLEAN t5_armed = FALSE
      STATE BOOLEAN tZ_armed = FALSE

      WHEN t5_armed HANDLE EVENT t5_timeout {
        CHANGE x = @+1
	CHANGE t5_armed = FALSE
	LET x = TimerRemoveAndSchedule(sched, <<time, "t5">>, 
                  {<<time + 5, "t5">>, <<time + 2, "tZ">>})
         IN CHANGE sched = x[1], time = x[2]
      }

      WHEN tZ_armed HANDLE EVENT tZ_timeout {
        CHANGE x = @-1
        CHANGE tZ_armed = FALSE
	LET x = TimerRemoveAndSchedule(sched, <<time, "tZ">>, {})
	 IN CHANGE sched = x[1], time = x[2]
      }

      HANDLE EVENT tick {
        | TimerNext(sched, time) = "t5" ->
            CHANGE t5_armed = TRUE
        | TimerNext(sched, time) = "tZ" ->
            CHANGE tZ_armed = TRUE
      }
    }
  }
}

(*

STATE TIMER t
HANDLE EVENT foo {
  TIMERRESTART t DURATION 5
}
HANDLE TIMEOUT t {
}

*)
// Only says machine is down, when it's certain to be down!
PROTOCOL boxwood2 CONCERN core {

CONSTANT InitObserver, NIL, GracePeriod, BeaconPeriod, QueryTimeout

ROLES Machine, Observe, Client

INTERACTION dummy() {
  tla { Perms == Permutations(Machine) 
            \cup Permutations(Observer)
            \cup Permutations(Client) }

  (* this is false, we may sometimes say a machine is running
   i.e. is_alive when really running is FALSE 
   It's a good testcase to make sure this is being discovered. *)

  tla { ClaimDeathWhenCertain == \A c \in Client: 
          LET m == st_Client[c].machine 
           IN IF m /= NIL 
	      THEN ~st_Client[c].is_alive => (~st_Machine[m].g_running)
	      ELSE TRUE
  }

  tla { MaxTime == 60 }
}

INTERACTION keep_alive {
  (* since we're sending a beacon every BeaconPeriod, make sure we're not  *)
  (* piling up an infinite number of them in the obuf, or Observer's inbox *) 
  tla { LimitMachineOBuf ==
          \A m \in Machine: Len(st_Machine[m].g_obuf) < 2 
  }

  MSG Machine -> SET<Observer> beacon()
  MSG SET<Observer> -> Machine ack()

  ROLE Machine {
    STATE VIEWS SET<Observer> = InitObserver // init bootstrap values

    STATE TIMER gracePeriodTimer

    EVERY BeaconPeriod {
      VIEW(Observer) !! beacon
      (* At this point there's a gracePeridodTimer running, TIMERRESTART *)
      (* will implictly cancel the existing schedule entry.              *)
      TIMERRESTART gracePeriodTimer DURATION GracePeriod
    }

    HANDLES MSG ack FROM MAJORITY(Observer) {
      TIMERCANCEL gracePeriodTimer
    }

    (* This happens only when the Machine cannot reach a majority of     *)
    (* Observers. *)
    HANDLES TIMEOUT gracePeriodTimer {
      SHUTDOWN
    }
  }

  ROLE Observer() {
    STATE MAP<Machine,Time> last_beacon = [m \in Machine |-> 0]
    HANDLES MSG beacon {
      REPLY ack()
      CHANGE last_beacon[beacon.sender] = NOW
    }
  }
}

INTERACTION query {
  MSG Client -> SET<Observer> query(Machine machine) // is machine alive?
  MSG SET<Observer> -> Client result(BOOLEAN alive)

  ROLE Observer {
    USE STATE last_beacon OF keep_alive
    HANDLES MSG query {
      | last_beacon[query.machine] = 0 -> 
          (* haven't heard ever, i.e. don't know for sure *)
          (* could either have kept silent, or presume ok *)
          REPLY result(alive = TRUE) 
      | otherwise ->
          LET a = (NOW - last_beacon[query.machine]) <= GracePeriod
          REPLY result(alive = a)
    }
  }

  ROLE Client {
    // change the view with 'CHANGEVIEW Observer = @ + x'
    STATE VIEW SET<Observer> = InitObserver // init
    STATE TIMER qt // for query MAJORITY receive
    STATE BOOLEAN busy = FALSE
    STATE Machine machine = NIL
    (* presumed alive, only valid if busy false *)
    STATE BOOLEAN is_alive = TRUE 

    // External event
    WHEN ~busy HANDLES EVENT query_event(Machine m) {
        TIMERRESTART qt DURATION QueryTimeout
        VIEW(Observer) !! query(machine = m)
        CHANGE busy = TRUE, machine = m, is_alive = TRUE
    }

    (* -- FIXME kramer@acm.org reto -- use the WHERE all(...) syntax *)
    (* then get rid of the 'otherwise' *)
    // This means a majority of messags have to arrive with result.alive=FALSE
    HANDLES MSG result FROM MAJORITY(Observer) {
        // relative to client's VIEW
      | (\A m \in ALL(result): ~m.alive) -> // if the majority is not alive
          TIMERCANCEL qt 
          CHANGE busy = FALSE, 
                 is_alive = FALSE (* machine is known to be down *)
      | otherwise -> 
	  continue
    }

    HANDLES TIMEOUT qt {
      CHANGE busy = FALSE, is_alive = TRUE (* machine queried presumed alive *)
    }
  }
}


interaction crash_fudge {
  (* -- FIXME kramer@acm.org reto -- the only relevance is that this *)
  (* makes Machine a crashable thing                                 *)
  ROLE Zzz() { 
    STATE BOOLEAN b = FALSE
    HANDLE CRASH Machine m { 
      CHANGE b = TRUE (* dummy instr *) 
      SHUTDOWN
    } 

    (* need to induce Observer crashing to check that the gracePeriod *)
    (* timeout is handled correctly                                   *)
    HANDLE CRASH Observer o { 
      CHANGE b = TRUE
      SHUTDOWN
    } 
  }
}

interaction dummy {
  (* for swimlane bug, use -w *)
  tla { 
    SearchView == << st_GLOBAL, st_Machine, st_Observer, st_Client, st_Zzz >> 
  }
}


}
